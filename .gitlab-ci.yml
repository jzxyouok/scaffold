###################################################
# 《YiiPlus脚手架》持续集成配置
#
# YiiPlus Scaffold
# Application  [common console backend frontend api]
# Environments [development testing simulation production]
# 
# 系统定义变量
# Group
#   DD_ACCESS_TOKEN           钉钉机器人 Token 信息
#   DOCKER_REGISTRY_URL       Docker仓库地址
#   DOCKER_REGISTRY_USER      Docker仓库用户名
#   DOCKER_REGISTRY_PASSWD    Docker仓库密码
#   SSH_PRIVATE_KEY           私钥（免密登录）
#   TX_SECRET_ID              腾讯云CLB负载均衡监听器ID
#   TX_SECRET_KEY             腾讯云CLB负载均衡监听器ID
#   TEST_SSH_SERVER           测试服务器（root@192.168.1.101）
#   ${ServerName}_TX_LB_IID   腾讯云CVM云服务器的唯一ID
#   ${ServerName}_SSH_SERVER  生产服务器（root@192.168.1.102）
# Project
#   HTTP_PORT                 http 端口 (8081)
#   HTTPS_PORT                https 端口 (4431)
#   TX_LB_ID                  腾讯云CLB负载均衡ID
#   TX_LB_LT_ID_PROD          腾讯云CLB负载均衡监听器ID（生产环境）
#   TX_LB_LT_ID_PRE           腾讯云CLB负载均衡监听器ID（预发布环境）
###################################################

image: gengxiankun/build:latest

stages:
  - test
  - build
  - deploy
  - release

variables:
  # 发布版本库
  BUILD_PATH: /data/build_release/
  # 代码运行目录
  WEBSITE_PATH: /data/website/
  # Yii 运行时产生文件
  RUNTIME_PATH: /data/runtime/
  # 测试服务器名称，例:TEST
  SERVERS_TEST: TEST
  # 生产服务器名称，例如:WEB_001,WEB_002
  SERVERS_PROD: WEB_001,WEB_002
  # 线上版本保留数
  KEEP_VERSION_NUM: 10

before_script:
  - if [ "$CI_COMMIT_REF_NAME" == 'master' ]; then APP_ENV='production'; else APP_ENV='testing'; fi

##################### test #####################
codeview:phpcs:
  stage: test
  script:
    - phpcs --standard=PSR2 --ignore=tests,docs/,docker/,vendor/,console/migrations -n --colors ./
  except:
    refs:
      - testing
      - simulation
      - master
      - tags

codeview:phpmd:
  stage: test
  script:
    - phpmd environments,common,console,backend,frontend,api text phpmd.xml --exclude tests,docs/,docker/,vendor/,console/migrations
  except:
    refs:
      - testing
      - simulation
      - master
      - tags

codeview:codequality:
  stage: test
  image: docker:latest
  script:
    - docker pull codeclimate/codeclimate
    - VOLUME_PATH=/tmp/builds"$(echo $PWD | sed 's|^/[^/]*||')"
    - docker run --env CODECLIMATE_CODE="$VOLUME_PATH" -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate analyze -f text
  except:
    refs:
      - testing
      - simulation
      - master
      - tags
  allow_failure: true
  when: manual

# test:unit:
#   stage: test
#   services:
#     - name: mysql:5.6
#       alias: mysql
#       command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-storage-engine=INNODB','--innodb_large_prefix=1','--innodb_file_format=Barracuda']
#     - name: redis:alpine
#       alias: redis
#   variables:
#     MYSQL_ROOT_PASSWORD: root
#     MYSQL_DATABASE: yiiplus
#     MYSQL_USER: web
#     MYSQL_PASSWORD: web
#   coverage: '/^\s*Lines:\s*\d+.\d+\%/'
#   script:
#     - php init --env=development --overwrite=y
#     - ./yii migrate/up --interactive=0
#     - codecept run unit -c tests --coverage --no-colors
#   artifacts:
#     name: "debug"
#     when: on_failure
#     untracked: true
#     paths:
#         - ${CI_PROJECT_DIR}/tests/_output

# test:api:
#   stage: test
#   services:
#     - name: mysql:5.6
#       alias: mysql
#       command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-storage-engine=INNODB','--innodb_large_prefix=1','--innodb_file_format=Barracuda']
#     - name: redis:alpine
#       alias: redis
#   variables:
#     MYSQL_ROOT_PASSWORD: root
#     MYSQL_DATABASE: yiiplus
#     MYSQL_USER: web
#     MYSQL_PASSWORD: web
#   script:
#     - php init --env=development --overwrite=y
#     - ./yii migrate/up --interactive=0
#     - php -S localhost:80 --docroot api/tests &>/dev/null&
#     - codecept run api -c tests
#   artifacts:
#     name: "debug"
#     when: on_failure
#     untracked: true
#     paths:
#       - ${CI_PROJECT_DIR}/api/runtime
#       - ${CI_PROJECT_DIR}/tests/_output

##################### build #####################
package:vendor:
  stage: build
  script:
    - if [ "$CI_COMMIT_REF_NAME" == 'master' ]; then 
    -   composer install --prefer-dist --optimize-autoloader -n --no-interaction --no-suggest --no-dev -vvv
    -   composer dump-autoload --optimize
    - else
    -   composer install --prefer-dist --optimize-autoloader -n --no-interaction --no-suggest -vvv
    -   composer dump-autoload --optimize
    - fi
  artifacts:
    name: "${CI_PROJECT_NAME}"
    untracked: false
    paths:
      - vendor
  only:
    refs:
      - testing
      - simulation
      - master
    changes:
      - composer.lock
      - composer.json
package:code:
  stage: build
  script:
    # yii 初始化
    - php init --env=${APP_ENV} --overwrite=y
    # docker-compose.yml 环境化
    - sed -i "s#<docker_env>#${APP_ENV}#g" docker-compose.yaml
    - sed -i "s#<registry_url>#${DOCKER_REGISTRY_URL}#g" docker-compose.yaml
    - sed -i "s#<project_path>#${CI_PROJECT_PATH}#g" docker-compose.yaml
    - sed -i "s#<project_name>#${CI_PROJECT_NAME}#g" docker-compose.yaml
    - sed -i "s#<project_namespace>#${CI_PROJECT_NAMESPACE}#g" docker-compose.yaml
    - sed -i "s#<website_path>#${WEBSITE_PATH}#g" docker-compose.yaml
    - sed -i "s#<runtime_path>#${RUNTIME_PATH}#g" docker-compose.yaml
    - sed -i "s#<http_port>#${HTTP_PORT}#g" docker-compose.yaml
    - sed -i "s#<https_port>#${HTTPS_PORT}#g" docker-compose.yaml
    # 清理 runtime
    - rm -rf console/runtime
    - rm -rf backend/web/assets/* backend/runtime backend/tests
    - rm -rf frontend/web/assets/* frontend/runtime frontend/tests
    - rm -rf api/web/assets/* api/runtime api/tests
  artifacts:
    name: "${CI_PROJECT_NAME}"
    untracked: false
    paths:
      - common
      - console
      - backend
      - frontend
      - api
      - yii
      - docker
      - docker-compose.yaml
  only:
    refs:
      - testing
      - simulation
      - master

.build-docker:
  stage: build
  image: docker:latest
  retry: 2
  script:
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWD} http://${DOCKER_REGISTRY_URL}
    - docker build -t ${DOCKER_REGISTRY_URL}/${CI_PROJECT_PATH}/${APP_ENV}/${DOCKER_NAME} docker/files/${DOCKER_NAME}/
    - docker push ${DOCKER_REGISTRY_URL}/${CI_PROJECT_PATH}/${APP_ENV}/${DOCKER_NAME}
    - docker rmi ${DOCKER_REGISTRY_URL}/${CI_PROJECT_PATH}/${APP_ENV}/${DOCKER_NAME}
  only:
    refs:
      - testing
      - simulation
      - master

build:cgi:
  extends: .build-docker
  variables:
    DOCKER_NAME: cgi
  only:
    changes:
      - docker/files/cgi/*
build:proxy:
  extends: .build-docker
  variables:
    DOCKER_NAME: proxy
  only:
    changes:
      - docker/files/proxy/*
build:crond:
  extends: .build-docker
  variables:
    DOCKER_NAME: crond
  only:
    changes:
      - docker/files/crond/*

##################### deploy #####################
.deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
    RUNTIME_APPS: console,backend,frontend,api
  dependencies:
    - package:vendor
    - package:code
  script:
    # 服务器授权
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${SSH_PRIVATE_KEY}")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # 发布代码
    - OLDIFS=$IFS;IFS=',';for SERVER in ${SERVERS}; do
    -   SSH_SERVER=${SERVER}_SSH_SERVER
    -   ssh ${!SSH_SERVER} "mkdir -vp ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}"
    -   scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=false -r ./ ${!SSH_SERVER}:${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}
    -   ssh -T -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=false ${!SSH_SERVER} "cd ${BUILD_PATH}${CI_PROJECT_PATH}/ && ls -1rt | tac | awk 'FNR > ${KEEP_VERSION_NUM}  {print(\$1);}' | xargs -i rm -rf {} && if [ ! -d \"${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}/vendor\" ]; then cp -rp ${WEBSITE_PATH}${CI_PROJECT_PATH}/vendor ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}/; fi"
        # 生成 runtime
    -   OLDIFS=$IFS;IFS=',';for i in ${RUNTIME_APPS}; do
    -     ssh ${!SSH_SERVER} "if [ ! -d \"${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}\" ]; then mkdir -vp ${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}/runtime/logs; chmod -R 777 ${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}/runtime/; fi && ln -sfn ${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}/runtime ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}/${i}/"
    -   done;IFS=$OLDIFS
    - done;IFS=$OLDIFS

# 测试环境
deploy:test:
  extends: .deploy
  variables:
    SERVERS: ${SERVERS_TEST}
  only:
    refs:
      - testing
# 仿真环境
deploy:simu:
  extends: .deploy
  variables:
    SERVERS: ${SERVERS_SIMU}
  only:
    refs:
      - simulation
# 生产环境
deploy:prod:
  extends: .deploy
  variables:
    SERVERS: ${SERVERS_PROD}
  only:
    refs:
      - master

##################### release #####################
.release-phpclb: 
  script: &phpclb
    # 滚动发布
    - OLDIFS=$IFS;IFS=',';for SERVER in ${SERVERS}; do
    -   SSH_SERVER=${SERVER}_SSH_SERVER
    -   LB_IID=${SERVER}_TX_LB_IID
    -   phpclb deregisterInstancesFromForwardLBFourthListener secretId ${TX_SECRET_ID} secretKey ${TX_SECRET_KEY} loadBalancerId ${TX_LB_ID} listenerId ${TX_LB_LT_ID_PROD} backends_n_instanceId ${!LB_IID} backends_n_port ${HTTPS_PORT}
    -   phpclb deregisterInstancesFromForwardLBFourthListener secretId ${TX_SECRET_ID} secretKey ${TX_SECRET_KEY} loadBalancerId ${TX_LB_ID} listenerId ${TX_LB_LT_ID_PRE} backends_n_instanceId ${!LB_IID} backends_n_port ${HTTPS_PORT}
    -   ssh ${!SSH_SERVER} "docker network prune -f --filter 'until=24h' && docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWD} http://${DOCKER_REGISTRY_URL}"
    -   ssh ${!SSH_SERVER} "if [ -d \"${WEBSITE_PATH}${CI_PROJECT_PATH}\" ]; then cd ${WEBSITE_PATH}${CI_PROJECT_PATH}; docker-compose pull; docker-compose rm -fsva; fi"
    -   ssh ${!SSH_SERVER} "if [ ! -d \"${WEBSITE_PATH}${CI_PROJECT_NAMESPACE}\" ]; then mkdir -vp ${WEBSITE_PATH}${CI_PROJECT_NAMESPACE}; fi && ln -sfn ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA} ${BUILD_PATH}${CI_PROJECT_PATH}/current-${CI_PROJECT_NAME}.tmp && mv -fT ${BUILD_PATH}${CI_PROJECT_PATH}/current-${CI_PROJECT_NAME}.tmp ${WEBSITE_PATH}${CI_PROJECT_PATH}"
    -   ssh ${!SSH_SERVER} "cd ${WEBSITE_PATH}${CI_PROJECT_PATH}; docker-compose pull; docker-compose up --force-recreate -d"
    -   if [ "${CI_ENV}" == 'prod' ]; then
    -     phpclb registerInstancesWithForwardLBFourthListener secretId ${TX_SECRET_ID} secretKey ${TX_SECRET_KEY} loadBalancerId ${TX_LB_ID} listenerId ${TX_LB_LT_ID_PROD} backends_n_instanceId ${!LB_IID} backends_n_port ${HTTPS_PORT}
    -   elif [ "${CI_ENV}" == 'pre' ]; then
    -     phpclb registerInstancesWithForwardLBFourthListener secretId ${TX_SECRET_ID} secretKey ${TX_SECRET_KEY} loadBalancerId ${TX_LB_ID} listenerId ${TX_LB_LT_ID_PRE} backends_n_instanceId ${!LB_IID} backends_n_port ${HTTPS_PORT}
    -     break
    -   fi
    -   sleep 10 # 解决腾讯云“该负载均衡正在执行上一次操作，请稍等再试”
    - done;IFS=$OLDIFS
.release:
  stage: release
  variables:
    GIT_STRATEGY: none
    SERVERS: ${SERVERS_PROD}
  dependencies: []
  before_script:
    # 服务器授权
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${SSH_PRIVATE_KEY}")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    # 滚动发布
    - OLDIFS=$IFS;IFS=',';for SERVER in ${SERVERS}; do
    -   SSH_SERVER=${SERVER}_SSH_SERVER
    -   ssh ${!SSH_SERVER} "docker network prune -f --filter 'until=24h' && docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWD} http://${DOCKER_REGISTRY_URL}"
    -   ssh ${!SSH_SERVER} "if [ -d \"${WEBSITE_PATH}${CI_PROJECT_PATH}\" ]; then cd ${WEBSITE_PATH}${CI_PROJECT_PATH}; docker-compose pull; docker-compose rm -fsva; fi"
    -   ssh ${!SSH_SERVER} "if [ ! -d \"${WEBSITE_PATH}${CI_PROJECT_NAMESPACE}\" ]; then mkdir -vp ${WEBSITE_PATH}${CI_PROJECT_NAMESPACE}; fi && ln -sfn ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA} ${BUILD_PATH}${CI_PROJECT_PATH}/current-${CI_PROJECT_NAME}.tmp && mv -fT ${BUILD_PATH}${CI_PROJECT_PATH}/current-${CI_PROJECT_NAME}.tmp ${WEBSITE_PATH}${CI_PROJECT_PATH}"
    -   ssh ${!SSH_SERVER} "cd ${WEBSITE_PATH}${CI_PROJECT_PATH}; docker-compose pull; docker-compose up --force-recreate -d"
    - done;IFS=$OLDIFS

# 测试环境
release:test:
  extends: .release
  variables:
    SERVERS: ${SERVERS_TEST}
  after_script:
    - test -n "${DT_ACCESS_TOKEN}" && curl "https://oapi.dingtalk.com/robot/send?access_token={$DT_ACCESS_TOKEN}" -H 'Content-Type:application/json' -d "{\"msgtype\":\"text\",\"text\":{\"content\":\"测试环境部署完成 \\n - 标题：${CI_COMMIT_TITLE} \\n - 描述：${CI_COMMIT_DESCRIPTION} \\n - 项目：${CI_PROJECT_URL} \\n - 分支：${CI_COMMIT_REF_NAME} \\n - 集成：${CI_PIPELINE_URL} \\n \"},\"at\":{\"atMobiles\":[\"13888888888\"],\"isAtAll\":false}}"
  only:
    refs:
      - testing
  environment:
    name: testing
# 仿真环境
release:simu:
  extends: .release
  variables:
    SERVERS: ${SERVERS_SIMU}
  after_script:
    - test -n "${DT_ACCESS_TOKEN}" && curl "https://oapi.dingtalk.com/robot/send?access_token={$DT_ACCESS_TOKEN}" -H 'Content-Type:application/json' -d "{\"msgtype\":\"text\",\"text\":{\"content\":\"测试环境部署完成 \\n - 标题：${CI_COMMIT_TITLE} \\n - 描述：${CI_COMMIT_DESCRIPTION} \\n - 项目：${CI_PROJECT_URL} \\n - 分支：${CI_COMMIT_REF_NAME} \\n - 集成：${CI_PIPELINE_URL} \\n \"},\"at\":{\"atMobiles\":[\"13888888888\"],\"isAtAll\":false}}"
  only:
    refs:
      - simulation
  environment:
    name: simulation
# 预发布环境
release:pre:
  extends: .release
  variables:
    CI_ENV: pre
  script: *phpclb
  after_script:
    - test -n "${DT_ACCESS_TOKEN}" && curl "https://oapi.dingtalk.com/robot/send?access_token={$DT_ACCESS_TOKEN}" -H 'Content-Type:application/json' -d "{\"msgtype\":\"text\",\"text\":{\"content\":\"预发布环境部署完成 \\n - 标题：${CI_COMMIT_TITLE} \\n - 描述：${CI_COMMIT_DESCRIPTION} \\n - 项目：${CI_PROJECT_URL} \\n - 分支：${CI_COMMIT_REF_NAME} \\n - 集成：${CI_PIPELINE_URL} \\n \"},\"at\":{\"atMobiles\":[\"13888888888\"],\"isAtAll\":false}}"
  only:
    refs:
      - master
  environment:
    name: production
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-pre-release/
# 生产环境（手动发布）
release:prod-manual:
  extends: .release
  variables:
    CI_ENV: prod
  script: *phpclb
  after_script:
    - test -n "${DT_ACCESS_TOKEN}" && curl "https://oapi.dingtalk.com/robot/send?access_token={$DT_ACCESS_TOKEN}" -H 'Content-Type:application/json' -d "{\"msgtype\":\"text\",\"text\":{\"content\":\"生产环境部署完成 \\n - 标题：${CI_COMMIT_TITLE} \\n - 描述：${CI_COMMIT_DESCRIPTION} \\n - 项目：${CI_PROJECT_URL} \\n - 分支：${CI_COMMIT_REF_NAME} \\n - 集成：${CI_PIPELINE_URL} \\n \"},\"at\":{\"atMobiles\":[\"13888888888\"],\"isAtAll\":true}}"
  only:
    refs:
      - master
  when: manual
  environment:
    name: production
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-pre-release/
# 生产环境（自动发布）
release:prod-auto:
  extends: .release
  variables:
    CI_ENV: prod
  script: *phpclb
  after_script:
    - test -n "${DT_ACCESS_TOKEN}" && curl "https://oapi.dingtalk.com/robot/send?access_token={$DT_ACCESS_TOKEN}" -H 'Content-Type:application/json' -d "{\"msgtype\":\"text\",\"text\":{\"content\":\"生产环境部署完成 \\n - 标题：${CI_COMMIT_TITLE} \\n - 描述：${CI_COMMIT_DESCRIPTION} \\n - 项目：${CI_PROJECT_URL} \\n - 分支：${CI_COMMIT_REF_NAME} \\n - 集成：${CI_PIPELINE_URL} \\n \"},\"at\":{\"atMobiles\":[\"13888888888\"],\"isAtAll\":true}}"
  only:
    refs:
      - master
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-pre-release/
  environment:
    name: production